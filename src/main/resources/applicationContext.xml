<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:mvc="http://www.springframework.org/schema/mvc"
       xmlns:beans="http://www.springframework.org/schema/beans" xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:context="http://www.springframework.org/schema/context" xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:task="http://www.springframework.org/schema/task"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.0.xsd
                http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.0.xsd
                http://www.springframework.org/schema/task http://www.springframework.org/schema/task/spring-task-4.0.xsd
                http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.0.xsd">
 	
 	<!--将多个配置文件读取到容器中，交给Spring管理-->
<!--  	<bean id="propertyConfigurer" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer"> -->
<!--         <property name="ignoreResourceNotFound" value="true"/> -->
<!--         <property name="locations"> -->
<!--             <list> -->
<!--                 <value>classpath*:/application.properties</value> -->
<!--             </list> -->
<!--         </property> -->
<!--     </bean> -->

    <context:property-placeholder location="classpath:application.properties" />
    <!-- 导入ehcache缓存配置 -->
	<import resource="ehcache/applicationContext-ehcache.xml" /> 
	<import resource="memcache/applicationContext-memcache.xml" /> 
	<import resource="redis/applicationContext-redis.xml" /> 
 	<!-- SpringMvc启用注解映射的支持，  使用annotation 自动注册bean, 并保证@Required、@Autowired、@Value的属性被注入 -->
 	<context:annotation-config/>  
 	
 	<!--自动扫描dao和service包(自动注入) -->
 	<context:component-scan base-package="com.lingcaibao.weixin" />
 	
 	
 	<!-- 此处对于定时时间的配置会被注解中的时间配置覆盖，因此，以注解配置为准 -->
    <task:scheduled-tasks scheduler="myScheduler">
        <task:scheduled ref="accessTokenService" method="refreshAllAccessToken" cron="0 18 10 * * *"/>
    </task:scheduled-tasks>

    <task:scheduler id="myScheduler" pool-size="10"/> 
    
    <!-- 数据源配置, 使用Tomcat JDBC连接池 -->
    <bean id="dataSource" class="org.apache.tomcat.jdbc.pool.DataSource"
              destroy-method="close">
            <!-- Connection Info -->
            <property name="driverClassName" value="${jdbc.driver}"/>
            <property name="url" value="${jdbc.url}"/>
            <property name="username" value="${jdbc.username}"/>
            <property name="password" value="${jdbc.password}"/>

            <!-- Connection Pooling Info -->
            <property name="maxActive" value="${jdbc.pool.maxActive}"/>
            <property name="maxIdle" value="${jdbc.pool.maxIdle}"/>
            <property name="defaultAutoCommit" value="false"/>
            <!-- 连接Idle一个小时后超时 -->
<!--             <property name="timeBetweenEvictionRunsMillis" value="3600000"/> -->
<!--             <property name="minEvictableIdleTimeMillis" value="3600000"/> -->

			<property name="validationQuery" value="select now()"></property> 
<!--             <property name="validationInterval" value="600000"></property>  -->
            <property name="testOnBorrow" value="true"></property>
            <property name="testOnReturn" value="true"></property>
            <property name="testWhileIdle" value="true"></property>
    </bean>
    
    
    <!-- 配置MyBatis分页： -->
    <bean id="pagePlugin"
          class="com.lingcaibao.weixin.core.plugin.paginator.mybatis.MybatisPaginationInterceptor">
        <property name="properties">
            <props>
                <prop key="dialectClass">com.lingcaibao.weixin.core.plugin.paginator.mybatis.jdbc.dialet.MySQLDialect</prop>
            </props>
        </property>
    </bean>
    
	<!-- 配置MyBatis组件：SqlSessionFactoryBean -->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="dataSource"/>
        <!-- 自动扫描entity目录，省掉Mapper.xml手工配置 -->
        <property name="typeAliasesPackage" value="com.lingcaibao.weixin"/>
        <!-- 分页插件装载 -->
        <property name="plugins">
            <array>
                <ref bean="pagePlugin"/>
            </array>
        </property>
        <!-- 指定Mapper.xml文件位置 -->
        <property name="mapperLocations" value="classpath:mybatis/*/*.xml" />
		<property name="configLocation" value="classpath:mybatis-config.xml"/>
    </bean>
    
    
    
    <!-- 扫描basePackage下所有以@Repository标识的 接口 -->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="basePackage" value="com.lingcaibao.weixin.*.repository" />
        <property name="annotationClass" value="org.springframework.stereotype.Repository" />
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory" />
    </bean>
    
    <!-- Spring 事务配置 -->
    <bean id="transactionManager"
          class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource"/>
    </bean>
    
 	<!-- ftp文件上传 -->
    <bean id="imageFtpApi" class="com.palm.lingcai.api.Image" >
    	<property name="host" value="${ftp.host}" />        
        <property name="port" value="${ftp.port}" />      
        <property name="username" value="${ftp.username}" />      
        <property name="password" value="${ftp.password}" /> 
		<!--         项目服务器上默认上传目录  -->
        <property name="imgProjectBasePath" value="${fileUpload.imgProjectBasePath}"/>
		<!--         FTP服务器上图片path目录 -->
        <property name="imgServerBasePath" value="${ftp.imgServerBasePath}"/>
        <!--         FTP服务器上文件根目录  -->
        <property name="containerRoot" value="${ftp.containerRoot}"/>
        <property name="domain" value="http://image.lingcaibao.com"/>
    </bean>
    
    <bean id="menuApi" class="weixin.lingcaibao.api.MenuAPI"></bean>
    
     <bean id="tokenAPI" class="weixin.lingcaibao.api.TokenAPI"></bean>
    
    <!-- 文件上传工具 -->
    <bean id="fileUploadUtil" class="com.lingcaibao.weixin.core.util.FileuploadUtil" >
   		<!--    windows本地上传文件根目录  -->
    	<property name="temp" value="${fileUpload.imgProjectBasePath}" />  
    	<!--    linux文件上传文件根目录  -->
    	<property name="realPath" value="${fileUpload.imgProjectBasePath}" />  
    </bean>
    
<!--     <bean id="databaseUtil" class="com.lingcaibao.weixin.core.util.DatabaseUtil" > -->
<!--     	 <property name="dataSource" ref="dataSource" /> -->
<!--     </bean> -->
    
	<!-- 使用annotation定义事务 -->
    <tx:annotation-driven  transaction-manager="transactionManager"  proxy-target-class="true"/>
    
    <!-- JSR303 Validator定义 -->
    <bean id="validator"  class="org.springframework.validation.beanvalidation.LocalValidatorFactoryBean"/>
</beans>

